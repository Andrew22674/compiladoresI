
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 29 21:30:51 CST 2020
//----------------------------------------------------

package code;

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 29 21:30:51 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\002\004\000\002\003\012" +
    "\000\002\003\011\000\002\022\004\000\002\022\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\016\012\000\002\016\012\000" +
    "\002\050\002\000\002\016\012\000\002\016\011\000\002" +
    "\016\013\000\002\016\013\000\002\016\012\000\002\025" +
    "\012\000\002\025\013\000\002\025\011\000\002\025\011" +
    "\000\002\025\012\000\002\025\012\000\002\020\007\000" +
    "\002\020\010\000\002\026\013\000\002\026\012\000\002" +
    "\021\016\000\002\021\015\000\002\021\006\000\002\013" +
    "\007\000\002\013\004\000\002\030\005\000\002\030\003" +
    "\000\002\014\014\000\002\014\013\000\002\014\013\000" +
    "\002\015\004\000\002\015\003\000\002\032\005\000\002" +
    "\010\011\000\002\010\007\000\002\043\006\000\002\045" +
    "\003\000\002\045\005\000\002\046\003\000\002\046\005" +
    "\000\002\047\003\000\002\047\005\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\005\000\002\036\011\000\002\036" +
    "\005\000\002\037\010\000\002\037\010\000\002\037\007" +
    "\000\002\037\011\000\002\037\011\000\002\037\010\000" +
    "\002\017\006\000\002\017\007\000\002\017\004\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\024" +
    "\004\000\002\024\006\000\002\024\003\000\002\024\005" +
    "\000\002\024\005\000\002\033\004\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\031\004" +
    "\000\002\031\006\000\002\031\006\000\002\027\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\006\023\004\050\011\001\002\000\010\011" +
    "\152\050\154\055\153\001\002\000\006\023\004\050\011" +
    "\001\002\000\004\002\324\001\002\000\006\002\000\023" +
    "\004\001\002\000\010\002\uffd0\023\uffd0\050\uffd0\001\002" +
    "\000\004\025\012\001\002\000\004\013\013\001\002\000" +
    "\004\014\014\001\002\000\004\006\015\001\002\000\024" +
    "\003\036\015\022\016\023\022\041\023\004\053\030\064" +
    "\034\066\032\067\024\001\002\000\032\003\ufff6\007\ufff6" +
    "\015\ufff6\016\ufff6\022\ufff6\023\ufff6\042\ufff6\053\ufff6\057" +
    "\ufff6\064\ufff6\066\ufff6\067\ufff6\001\002\000\032\003\ufff9" +
    "\007\ufff9\015\ufff9\016\ufff9\022\ufff9\023\ufff9\042\ufff9\053" +
    "\ufff9\057\ufff9\064\ufff9\066\ufff9\067\ufff9\001\002\000\032" +
    "\003\ufff2\007\ufff2\015\ufff2\016\ufff2\022\ufff2\023\ufff2\042" +
    "\ufff2\053\ufff2\057\ufff2\064\ufff2\066\ufff2\067\ufff2\001\002" +
    "\000\032\003\ufff0\007\ufff0\015\ufff0\016\ufff0\022\ufff0\023" +
    "\ufff0\042\ufff0\053\ufff0\057\ufff0\064\ufff0\066\ufff0\067\ufff0" +
    "\001\002\000\006\003\266\013\267\001\002\000\004\013" +
    "\210\001\002\000\014\011\152\013\151\050\154\054\155" +
    "\055\153\001\002\000\032\003\ufff1\007\ufff1\015\ufff1\016" +
    "\ufff1\022\ufff1\023\ufff1\042\ufff1\053\ufff1\057\ufff1\064\ufff1" +
    "\066\ufff1\067\ufff1\001\002\000\024\003\036\015\022\016" +
    "\023\022\041\023\004\053\146\064\034\066\032\067\024" +
    "\001\002\000\032\003\uffef\007\uffef\015\uffef\016\uffef\022" +
    "\uffef\023\uffef\042\uffef\053\uffef\057\uffef\064\uffef\066\uffef" +
    "\067\uffef\001\002\000\004\007\145\001\002\000\032\003" +
    "\ufff5\007\ufff5\015\ufff5\016\ufff5\022\ufff5\023\ufff5\042\ufff5" +
    "\053\ufff5\057\ufff5\064\ufff5\066\ufff5\067\ufff5\001\002\000" +
    "\004\006\076\001\002\000\032\003\ufff3\007\ufff3\015\ufff3" +
    "\016\ufff3\022\ufff3\023\ufff3\042\ufff3\053\ufff3\057\ufff3\064" +
    "\ufff3\066\ufff3\067\ufff3\001\002\000\004\013\062\001\002" +
    "\000\032\003\ufff4\007\ufff4\015\ufff4\016\ufff4\022\ufff4\023" +
    "\ufff4\042\ufff4\053\ufff4\057\ufff4\064\ufff4\066\ufff4\067\ufff4" +
    "\001\002\000\034\003\uffee\007\uffee\015\uffee\016\uffee\022" +
    "\uffee\023\uffee\035\061\042\uffee\053\uffee\057\uffee\064\uffee" +
    "\066\uffee\067\uffee\001\002\000\032\003\ufff7\007\ufff7\015" +
    "\ufff7\016\ufff7\022\ufff7\023\ufff7\042\ufff7\053\ufff7\057\ufff7" +
    "\064\ufff7\066\ufff7\067\ufff7\001\002\000\032\003\ufff8\007" +
    "\ufff8\015\ufff8\016\ufff8\022\ufff8\023\ufff8\042\ufff8\053\ufff8" +
    "\057\ufff8\064\ufff8\066\ufff8\067\ufff8\001\002\000\004\013" +
    "\042\001\002\000\006\003\043\050\044\001\002\000\004" +
    "\014\060\001\002\000\004\067\045\001\002\000\004\035" +
    "\046\001\002\000\004\005\047\001\002\000\004\060\050" +
    "\001\002\000\004\005\051\001\002\000\004\014\052\001" +
    "\002\000\004\006\053\001\002\000\024\003\036\007\054" +
    "\015\022\016\023\022\041\023\004\064\034\066\032\067" +
    "\024\001\002\000\032\003\uffda\007\uffda\015\uffda\016\uffda" +
    "\022\uffda\023\uffda\042\uffda\053\uffda\057\uffda\064\uffda\066" +
    "\uffda\067\uffda\001\002\000\024\003\036\007\057\015\022" +
    "\016\023\022\041\023\004\064\034\066\032\067\024\001" +
    "\002\000\032\003\ufffa\007\ufffa\015\ufffa\016\ufffa\022\ufffa" +
    "\023\ufffa\042\ufffa\053\ufffa\057\ufffa\064\ufffa\066\ufffa\067" +
    "\ufffa\001\002\000\032\003\uffdb\007\uffdb\015\uffdb\016\uffdb" +
    "\022\uffdb\023\uffdb\042\uffdb\053\uffdb\057\uffdb\064\uffdb\066" +
    "\uffdb\067\uffdb\001\002\000\032\003\uffd9\007\uffd9\015\uffd9" +
    "\016\uffd9\022\uffd9\023\uffd9\042\uffd9\053\uffd9\057\uffd9\064" +
    "\uffd9\066\uffd9\067\uffd9\001\002\000\032\003\uffd7\007\uffd7" +
    "\015\uffd7\016\uffd7\022\uffd7\023\uffd7\042\uffd7\053\uffd7\057" +
    "\uffd7\064\uffd7\066\uffd7\067\uffd7\001\002\000\016\004\071" +
    "\005\063\041\064\061\066\062\067\067\065\001\002\000" +
    "\014\014\uffc4\026\uffc4\030\uffc4\034\uffc4\035\uffc4\001\002" +
    "\000\004\040\074\001\002\000\014\014\uffc5\026\uffc5\030" +
    "\uffc5\034\uffc5\035\uffc5\001\002\000\014\014\uffc2\026\uffc2" +
    "\030\uffc2\034\uffc2\035\uffc2\001\002\000\014\014\uffc1\026" +
    "\uffc1\030\uffc1\034\uffc1\035\uffc1\001\002\000\004\014\072" +
    "\001\002\000\014\014\uffc3\026\uffc3\030\uffc3\034\uffc3\035" +
    "\uffc3\001\002\000\004\035\073\001\002\000\032\003\uff9e" +
    "\007\uff9e\015\uff9e\016\uff9e\022\uff9e\023\uff9e\042\uff9e\053" +
    "\uff9e\057\uff9e\064\uff9e\066\uff9e\067\uff9e\001\002\000\004" +
    "\041\075\001\002\000\014\014\uffc0\026\uffc0\030\uffc0\034" +
    "\uffc0\035\uffc0\001\002\000\024\003\036\007\077\015\022" +
    "\016\023\022\041\023\004\064\034\066\032\067\024\001" +
    "\002\000\004\021\140\001\002\000\024\003\036\007\101" +
    "\015\022\016\023\022\041\023\004\064\034\066\032\067" +
    "\024\001\002\000\004\021\102\001\002\000\004\013\103" +
    "\001\002\000\016\005\104\013\112\061\110\062\113\063" +
    "\107\067\106\001\002\000\004\027\136\001\002\000\004" +
    "\014\134\001\002\000\012\014\uffa9\027\130\031\uffa9\065" +
    "\127\001\002\000\010\061\125\062\126\067\124\001\002" +
    "\000\006\014\uffab\031\uffab\001\002\000\006\014\uffaf\031" +
    "\117\001\002\000\020\003\114\005\104\013\112\061\110" +
    "\062\113\063\107\067\106\001\002\000\006\014\uffaa\031" +
    "\uffaa\001\002\000\004\014\122\001\002\000\004\014\116" +
    "\001\002\000\006\014\uffae\031\117\001\002\000\016\005" +
    "\104\013\112\061\110\062\113\063\107\067\106\001\002" +
    "\000\004\014\uffb0\001\002\000\004\014\uffac\001\002\000" +
    "\004\014\uffad\001\002\000\004\014\uffb1\001\002\000\006" +
    "\014\uffa4\031\uffa4\001\002\000\006\014\uffa3\031\uffa3\001" +
    "\002\000\006\014\uffa2\031\uffa2\001\002\000\004\067\133" +
    "\001\002\000\006\005\131\067\132\001\002\000\006\014" +
    "\uffa6\031\uffa6\001\002\000\006\014\uffa7\031\uffa7\001\002" +
    "\000\006\014\uffa8\031\uffa8\001\002\000\004\035\135\001" +
    "\002\000\032\003\uffdd\007\uffdd\015\uffdd\016\uffdd\022\uffdd" +
    "\023\uffdd\042\uffdd\053\uffdd\057\uffdd\064\uffdd\066\uffdd\067" +
    "\uffdd\001\002\000\004\067\137\001\002\000\006\014\uffa5" +
    "\031\uffa5\001\002\000\004\013\141\001\002\000\016\005" +
    "\104\013\112\061\110\062\113\063\107\067\106\001\002" +
    "\000\004\014\143\001\002\000\004\035\144\001\002\000" +
    "\032\003\uffdc\007\uffdc\015\uffdc\016\uffdc\022\uffdc\023\uffdc" +
    "\042\uffdc\053\uffdc\057\uffdc\064\uffdc\066\uffdc\067\uffdc\001" +
    "\002\000\006\002\ufffb\023\ufffb\001\002\000\004\007\147" +
    "\001\002\000\006\002\ufffc\023\ufffc\001\002\000\004\054" +
    "\205\001\002\000\012\011\152\050\154\055\153\067\172" +
    "\001\002\000\010\014\uffb3\054\uffb3\067\uffb3\001\002\000" +
    "\010\014\uffb2\054\uffb2\067\uffb2\001\002\000\010\014\uffb4" +
    "\054\uffb4\067\uffb4\001\002\000\020\004\071\005\063\013" +
    "\160\041\064\061\066\062\067\067\065\001\002\000\012" +
    "\014\uffc7\026\uffc7\030\uffc7\035\uffc7\001\002\000\012\014" +
    "\uffcb\026\uffcb\030\166\035\uffcb\001\002\000\020\004\071" +
    "\005\063\013\160\041\064\061\066\062\067\067\065\001" +
    "\002\000\012\014\uffc9\026\uffc9\030\uffc9\035\uffc9\001\002" +
    "\000\006\026\163\035\164\001\002\000\020\004\071\005" +
    "\063\013\160\041\064\061\066\062\067\067\065\001\002" +
    "\000\032\003\uffcc\007\uffcc\015\uffcc\016\uffcc\022\uffcc\023" +
    "\uffcc\042\uffcc\053\uffcc\057\uffcc\064\uffcc\066\uffcc\067\uffcc" +
    "\001\002\000\012\014\uffca\026\uffca\030\166\035\uffca\001" +
    "\002\000\020\004\071\005\063\013\160\041\064\061\066" +
    "\062\067\067\065\001\002\000\012\014\uffc8\026\uffc8\030" +
    "\uffc8\035\uffc8\001\002\000\006\014\171\026\163\001\002" +
    "\000\012\014\uffc6\026\uffc6\030\uffc6\035\uffc6\001\002\000" +
    "\006\014\uffd5\033\uffd5\001\002\000\004\014\201\001\002" +
    "\000\006\014\176\033\175\001\002\000\004\067\200\001" +
    "\002\000\004\035\177\001\002\000\032\003\uffd8\007\uffd8" +
    "\015\uffd8\016\uffd8\022\uffd8\023\uffd8\042\uffd8\053\uffd8\057" +
    "\uffd8\064\uffd8\066\uffd8\067\uffd8\001\002\000\006\014\uffd6" +
    "\033\uffd6\001\002\000\004\054\202\001\002\000\016\004" +
    "\071\005\063\041\064\061\066\062\067\067\065\001\002" +
    "\000\004\035\204\001\002\000\032\003\uffce\007\uffce\015" +
    "\uffce\016\uffce\022\uffce\023\uffce\042\uffce\053\uffce\057\uffce" +
    "\064\uffce\066\uffce\067\uffce\001\002\000\020\004\071\005" +
    "\063\013\160\041\064\061\066\062\067\067\065\001\002" +
    "\000\006\026\163\035\207\001\002\000\032\003\uffcd\007" +
    "\uffcd\015\uffcd\016\uffcd\022\uffcd\023\uffcd\042\uffcd\053\uffcd" +
    "\057\uffcd\064\uffcd\066\uffcd\067\uffcd\001\002\000\020\003" +
    "\211\005\104\013\112\061\110\062\113\063\107\067\106" +
    "\001\002\000\004\014\uffeb\001\002\000\004\014\213\001" +
    "\002\000\004\006\214\001\002\000\024\003\036\007\215" +
    "\015\022\016\023\022\041\023\004\064\034\066\032\067" +
    "\024\001\002\000\006\017\255\020\222\001\002\000\024" +
    "\003\036\007\217\015\022\016\023\022\041\023\004\064" +
    "\034\066\032\067\024\001\002\000\006\017\220\020\222" +
    "\001\002\000\006\003\254\035\253\001\002\000\032\003" +
    "\uffe6\007\uffe6\015\uffe6\016\uffe6\022\uffe6\023\uffe6\042\uffe6" +
    "\053\uffe6\057\uffe6\064\uffe6\066\uffe6\067\uffe6\001\002\000" +
    "\004\013\223\001\002\000\016\005\104\013\112\061\110" +
    "\062\113\063\107\067\106\001\002\000\004\014\225\001" +
    "\002\000\004\006\226\001\002\000\024\003\036\007\227" +
    "\015\022\016\023\022\041\023\004\064\034\066\032\067" +
    "\024\001\002\000\010\017\250\020\222\052\233\001\002" +
    "\000\024\003\036\007\231\015\022\016\023\022\041\023" +
    "\004\064\034\066\032\067\024\001\002\000\010\017\234" +
    "\020\222\052\233\001\002\000\032\003\uffe0\007\uffe0\015" +
    "\uffe0\016\uffe0\022\uffe0\023\uffe0\042\uffe0\053\uffe0\057\uffe0" +
    "\064\uffe0\066\uffe0\067\uffe0\001\002\000\004\006\237\001" +
    "\002\000\004\035\236\001\002\000\032\003\uffe1\007\uffe1" +
    "\015\uffe1\016\uffe1\022\uffe1\023\uffe1\042\uffe1\053\uffe1\057" +
    "\uffe1\064\uffe1\066\uffe1\067\uffe1\001\002\000\032\003\uffe4" +
    "\007\uffe4\015\uffe4\016\uffe4\022\uffe4\023\uffe4\042\uffe4\053" +
    "\uffe4\057\uffe4\064\uffe4\066\uffe4\067\uffe4\001\002\000\024" +
    "\003\036\007\240\015\022\016\023\022\041\023\004\064" +
    "\034\066\032\067\024\001\002\000\004\017\245\001\002" +
    "\000\024\003\036\007\242\015\022\016\023\022\041\023" +
    "\004\064\034\066\032\067\024\001\002\000\004\017\243" +
    "\001\002\000\004\035\244\001\002\000\032\003\uffde\007" +
    "\uffde\015\uffde\016\uffde\022\uffde\023\uffde\042\uffde\053\uffde" +
    "\057\uffde\064\uffde\066\uffde\067\uffde\001\002\000\004\035" +
    "\246\001\002\000\032\003\uffdf\007\uffdf\015\uffdf\016\uffdf" +
    "\022\uffdf\023\uffdf\042\uffdf\053\uffdf\057\uffdf\064\uffdf\066" +
    "\uffdf\067\uffdf\001\002\000\032\003\uffe2\007\uffe2\015\uffe2" +
    "\016\uffe2\022\uffe2\023\uffe2\042\uffe2\053\uffe2\057\uffe2\064" +
    "\uffe2\066\uffe2\067\uffe2\001\002\000\004\035\252\001\002" +
    "\000\032\003\uffe3\007\uffe3\015\uffe3\016\uffe3\022\uffe3\023" +
    "\uffe3\042\uffe3\053\uffe3\057\uffe3\064\uffe3\066\uffe3\067\uffe3" +
    "\001\002\000\032\003\uffe5\007\uffe5\015\uffe5\016\uffe5\022" +
    "\uffe5\023\uffe5\042\uffe5\053\uffe5\057\uffe5\064\uffe5\066\uffe5" +
    "\067\uffe5\001\002\000\032\003\uffe8\007\uffe8\015\uffe8\016" +
    "\uffe8\022\uffe8\023\uffe8\042\uffe8\053\uffe8\057\uffe8\064\uffe8" +
    "\066\uffe8\067\uffe8\001\002\000\032\003\uffe7\007\uffe7\015" +
    "\uffe7\016\uffe7\022\uffe7\023\uffe7\042\uffe7\053\uffe7\057\uffe7" +
    "\064\uffe7\066\uffe7\067\uffe7\001\002\000\006\003\260\035" +
    "\257\001\002\000\032\003\uffe9\007\uffe9\015\uffe9\016\uffe9" +
    "\022\uffe9\023\uffe9\042\uffe9\053\uffe9\057\uffe9\064\uffe9\066" +
    "\uffe9\067\uffe9\001\002\000\032\003\uffed\007\uffed\015\uffed" +
    "\016\uffed\022\uffed\023\uffed\042\uffed\053\uffed\057\uffed\064" +
    "\uffed\066\uffed\067\uffed\001\002\000\032\003\uffec\007\uffec" +
    "\015\uffec\016\uffec\022\uffec\023\uffec\042\uffec\053\uffec\057" +
    "\uffec\064\uffec\066\uffec\067\uffec\001\002\000\004\014\262" +
    "\001\002\000\004\006\263\001\002\000\004\007\264\001" +
    "\002\000\004\020\222\001\002\000\032\003\uffea\007\uffea" +
    "\015\uffea\016\uffea\022\uffea\023\uffea\042\uffea\053\uffea\057" +
    "\uffea\064\uffea\066\uffea\067\uffea\001\002\000\004\007\321" +
    "\001\002\000\004\067\270\001\002\000\004\014\271\001" +
    "\002\000\004\006\272\001\002\000\004\024\274\001\002" +
    "\000\004\007\320\001\002\000\016\004\071\005\063\041" +
    "\064\061\066\062\067\067\065\001\002\000\004\034\276" +
    "\001\002\000\024\003\036\015\022\016\023\022\041\023" +
    "\004\042\277\064\034\066\032\067\024\001\002\000\004" +
    "\035\315\001\002\000\024\003\036\015\022\016\023\022" +
    "\041\023\004\042\301\064\034\066\032\067\024\001\002" +
    "\000\004\035\302\001\002\000\010\007\uffb8\024\274\046" +
    "\303\001\002\000\006\003\306\034\307\001\002\000\004" +
    "\007\uffb9\001\002\000\004\007\uffba\001\002\000\004\007" +
    "\uffb5\001\002\000\024\003\036\015\022\016\023\022\041" +
    "\023\004\042\310\064\034\066\032\067\024\001\002\000" +
    "\004\035\314\001\002\000\024\003\036\015\022\016\023" +
    "\022\041\023\004\042\312\064\034\066\032\067\024\001" +
    "\002\000\004\035\313\001\002\000\004\007\uffb6\001\002" +
    "\000\004\007\uffb7\001\002\000\010\007\uffbb\024\274\046" +
    "\303\001\002\000\004\007\uffbc\001\002\000\004\007\uffbd" +
    "\001\002\000\032\003\uffbf\007\uffbf\015\uffbf\016\uffbf\022" +
    "\uffbf\023\uffbf\042\uffbf\053\uffbf\057\uffbf\064\uffbf\066\uffbf" +
    "\067\uffbf\001\002\000\032\003\uffbe\007\uffbe\015\uffbe\016" +
    "\uffbe\022\uffbe\023\uffbe\042\uffbe\053\uffbe\057\uffbe\064\uffbe" +
    "\066\uffbe\067\uffbe\001\002\000\006\002\ufffd\023\004\001" +
    "\002\000\010\002\uffd1\023\uffd1\050\uffd1\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufffe\023\004\001\002\000" +
    "\006\002\uffff\023\004\001\002\000\004\067\330\001\002" +
    "\000\004\013\331\001\002\000\010\011\152\050\154\055" +
    "\153\001\002\000\004\067\350\001\002\000\004\014\334" +
    "\001\002\000\004\006\335\001\002\000\024\003\340\015" +
    "\022\016\023\022\041\023\004\057\336\064\034\066\032" +
    "\067\024\001\002\000\004\067\346\001\002\000\024\003" +
    "\036\015\022\016\023\022\041\023\004\057\336\064\034" +
    "\066\032\067\024\001\002\000\030\003\uffee\007\343\015" +
    "\uffee\016\uffee\022\uffee\023\uffee\035\061\057\uffee\064\uffee" +
    "\066\uffee\067\uffee\001\002\000\004\007\342\001\002\000" +
    "\036\002\uffd3\003\uffd3\007\uffd3\015\uffd3\016\uffd3\022\uffd3" +
    "\023\uffd3\042\uffd3\050\uffd3\053\uffd3\057\uffd3\064\uffd3\066" +
    "\uffd3\067\uffd3\001\002\000\036\002\uffd2\003\uffd2\007\uffd2" +
    "\015\uffd2\016\uffd2\022\uffd2\023\uffd2\042\uffd2\050\uffd2\053" +
    "\uffd2\057\uffd2\064\uffd2\066\uffd2\067\uffd2\001\002\000\004" +
    "\007\345\001\002\000\036\002\uffd4\003\uffd4\007\uffd4\015" +
    "\uffd4\016\uffd4\022\uffd4\023\uffd4\042\uffd4\050\uffd4\053\uffd4" +
    "\057\uffd4\064\uffd4\066\uffd4\067\uffd4\001\002\000\004\035" +
    "\347\001\002\000\004\007\uffcf\001\002\000\006\014\uffa1" +
    "\033\351\001\002\000\012\003\352\011\152\050\154\055" +
    "\153\001\002\000\004\014\uff9f\001\002\000\004\014\uffa0" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\012\002\005\003\006\014\007\015\004\001" +
    "\001\000\004\035\326\001\001\000\006\003\324\014\322" +
    "\001\001\000\002\001\001\000\006\014\007\015\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\010\030\013" +
    "\020\014\024\016\036\021\037\022\025\023\016\026\015" +
    "\027\017\036\026\042\034\043\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\147\001" +
    "\001\000\002\001\001\000\030\010\030\013\020\014\024" +
    "\016\036\021\037\023\055\026\015\027\017\036\026\042" +
    "\034\043\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\010\030\013\020" +
    "\014\024\016\036\021\037\022\054\023\016\026\015\027" +
    "\017\036\026\042\034\043\032\001\001\000\002\001\001" +
    "\000\030\010\030\013\020\014\024\016\036\021\037\023" +
    "\055\026\015\027\017\036\026\042\034\043\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\010\030\013\020\014\024\016\036\021\037" +
    "\022\077\023\016\026\015\027\017\036\026\042\034\043" +
    "\032\001\001\000\002\001\001\000\030\010\030\013\020" +
    "\014\024\016\036\021\037\023\055\026\015\027\017\036" +
    "\026\042\034\043\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\110\024\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\122\001\001\000\006\012" +
    "\110\024\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\117\001\001\000\006\012" +
    "\110\024\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\110\024" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\173\035\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\155\045\161\046\156\047\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\034\155\045\167\046" +
    "\156\047\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\155\046\164\047\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\155\047\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\034\155\045\205\046" +
    "\156\047\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\110\024\211\001\001\000\004\050\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\030" +
    "\013\020\014\024\016\036\021\037\022\215\023\016\026" +
    "\015\027\017\036\026\042\034\043\032\001\001\000\004" +
    "\025\255\001\001\000\030\010\030\013\020\014\024\016" +
    "\036\021\037\023\055\026\015\027\017\036\026\042\034" +
    "\043\032\001\001\000\004\025\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\110" +
    "\024\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\010\030\013\020\014\024\016\036\021\037\022\227" +
    "\023\016\026\015\027\017\036\026\042\034\043\032\001" +
    "\001\000\006\020\246\025\250\001\001\000\030\010\030" +
    "\013\020\014\024\016\036\021\037\023\055\026\015\027" +
    "\017\036\026\042\034\043\032\001\001\000\006\020\231" +
    "\025\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\010\030\013\020\014\024\016\036\021\037\022\240\023" +
    "\016\026\015\027\017\036\026\042\034\043\032\001\001" +
    "\000\002\001\001\000\030\010\030\013\020\014\024\016" +
    "\036\021\037\023\055\026\015\027\017\036\026\042\034" +
    "\043\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\272\001\001\000\002\001\001\000\004\034\274\001" +
    "\001\000\002\001\001\000\032\010\030\013\020\014\024" +
    "\016\036\021\037\022\277\023\016\026\015\027\017\036" +
    "\026\042\034\043\032\001\001\000\002\001\001\000\030" +
    "\010\030\013\020\014\024\016\036\021\037\023\055\026" +
    "\015\027\017\036\026\042\034\043\032\001\001\000\002" +
    "\001\001\000\006\017\303\037\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\010\030\013\020\014\024\016\036\021\037\022" +
    "\310\023\016\026\015\027\017\036\026\042\034\043\032" +
    "\001\001\000\002\001\001\000\030\010\030\013\020\014" +
    "\024\016\036\021\037\023\055\026\015\027\017\036\026" +
    "\042\034\043\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\315\037\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\007\015\325\001\001\000" +
    "\004\014\322\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\332\035\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\010\030\013\020" +
    "\014\024\016\036\021\037\022\336\023\016\026\015\027" +
    "\017\032\340\036\026\042\034\043\032\001\001\000\002" +
    "\001\001\000\032\010\030\013\020\014\024\016\036\021" +
    "\037\023\055\026\015\027\017\032\343\036\026\042\034" +
    "\043\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\352\035\331\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

public int count = 0;
public static Node root;
ArrayList<String> errors = new ArrayList();

 private Symbol s;

    public Node getRoot(){
        return this.root;
    }
    
    
    /*public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error en linea " + (s.left+1) + "\n" + "columna " + s.right + "\nidentificador: " + s.value + " no reconocido.");
    }

    public void unrecovered_syntax_Error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en linea " + (s.left+1) + "\n" + "columna " + s.right + "\nidentificador: " + s.value + " no reconocido 2.");
    }

    

    public Symbol getS(){
        return this.s;
}*/


    /*public static Scanner s2;
    int myerrors = 0;

    @Override
    public void report_error(String message, Object info) {
    if (info instanceof String){
	myerrors++; 
      System.err.println("  "+ myerrors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s2.current_lexeme()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }*/
     @Override
    public void syntax_error(Symbol s){
        String lexVal = s.value != null ? s.value.toString() : getToken(s.sym);
        String err = "";
        if(lexVal.equals("EOF")){
            err = "Error found: expected }";
        } else {
            err = "Error found: " +  " line: " + (s.left+1) + " column: " + s.right + ", No se esperaba: " + lexVal;
        }
        System.err.println(err);
        errors.add(err);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexVal = s.value != null ? s.value.toString() : getToken(s.sym);
        String err = "";
        if(lexVal.equals("EOF")){
            err = "";
        }else{
            err = "Unrecoverd error! Error found: " + " line: " + (s.left+1) + " column: " + s.right + ", No se esperaba: " + lexVal;
        }
        System.err.println(err);
        errors.add(err);
    }

    public String getToken(int id){
        String name = "";
        name = terminals.myterminals[id];
        //System.out.println("name: " + name);
        switch(id){
 
            default:
                return name;
    }
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // print ::= PRINT LPAR assignment RPAR SEMICOLON 
            {
              Object RESULT =null;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object assig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("PRINT");
        mm.setID(parser.count);
        parser.count++;
        Node child = new Node(mm, (String)assig);
        mm.addLeafs(child);
        //mm.addLeafs((Node) assig);
        
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("print",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // params ::= vartypes ID COMMA error 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
      Node mm = new Node();
        mm.setTag("PARAMS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // params ::= vartypes ID COMMA params 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		      
            Node mm = new Node();
            mm.setTag("PARAMS");
            mm.setID(parser.count);
            parser.count++;
            mm.addLeafs((Node) vt);
            mm.addLeafs((Node) p);

            RESULT=mm;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // params ::= vartypes ID 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
      Node mm = new Node();
        mm.setTag("PARAMS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("params",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tokens_boolean ::= NOT FALSE 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tokens_boolean ::= NOT TRUE 
            {
              Object RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tokens_boolean ::= NOT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tokens_boolean ::= NUM RELOP ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tokens_boolean ::= ID RELOP NUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tokens_boolean ::= ID RELOP ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tokens_boolean ::= ID EQ ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tokens_boolean ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tokens_boolean ::= FALSE 
            {
              Object RESULT =null;
		int Falseleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Falseright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object False = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tokens_boolean ::= TRUE 
            {
              Object RESULT =null;
		int Trueleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Trueright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object True = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // boolean_expr_cont ::= LOGOP boolean_expr 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
      Node mm = new Node();
        mm.setTag("BOOLEAN EXPRETION COUNT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr_cont",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // boolean_expr ::= LPAR error RPAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // boolean_expr ::= LPAR boolean_expr RPAR 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
      Node mm = new Node();
        mm.setTag("BOOLEAN EXPRETION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // boolean_expr ::= tokens_boolean 
            {
              Object RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("BOOLEAN EXPRETION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) tb);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // boolean_expr ::= LPAR boolean_expr RPAR boolean_expr_cont 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bexpcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bexpcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bexpc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("BOOLEAN EXPRETION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) bexpc);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // boolean_expr ::= tokens_boolean boolean_expr_cont 
            {
              Object RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bexpcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bexpcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bexpc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("BOOLEAN EXPRETION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) tb);
        mm.addLeafs((Node) bexpc);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // vartypes ::= NONE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vartypes",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // vartypes ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vartypes",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // vartypes ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vartypes",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // default_stmt ::= DEFAULT error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("default_stmt",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // default_stmt ::= DEFAULT COLON statement_list END SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("DEFAULT STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("default_stmt",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // default_stmt ::= DEFAULT COLON END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("default_stmt",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // case_stmt ::= CASE assignment COLON statement_list END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // case_stmt ::= CASE assignment COLON statement_list END SEMICOLON default_stmt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case_stmt ::= CASE assignment COLON statement_list END SEMICOLON case_stmt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // case_stmt ::= CASE assignment COLON END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_stmt ::= CASE assignment COLON END SEMICOLON default_stmt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // case_stmt ::= CASE assignment COLON END SEMICOLON case_stmt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // switch_stmt ::= SWITCH error RKEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("switch_stmt",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // switch_stmt ::= SWITCH LPAR ID RPAR LKEY case_stmt RKEY 
            {
              Object RESULT =null;
		int cstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("SWITCH STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) cst);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("switch_stmt",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assignment ::= QUOTATION LETTER QUOTATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignment ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assignment ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignment ::= DIGIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignment ::= NUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= LPAR assign_expr RPAR 
            {
              Object RESULT =null;
		int axpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int axpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object axp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("FACTOR");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) axp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= assignment 
            {
              Object RESULT =null;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object assig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("FACTOR");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) assig);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= term MULTOP factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("TERM");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) f);
        mm.addLeafs((Node) t);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("TERM");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) f);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assign_expr ::= assign_expr SUMOP term 
            {
              Object RESULT =null;
		int axpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int axpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object axp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("ASSIGN EXPRESION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) axp);
        mm.addLeafs((Node) t);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_expr",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assign_expr ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("ASSIGN EXPRESION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) t);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_expr",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignvalues ::= ID ASSIGN assign_expr SEMICOLON 
            {
              Object RESULT =null;
		int axpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int axpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object axp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("ASSIGN VALUES");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) axp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignvalues",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // vars ::= ID vartypes ASSIGN assign_expr SEMICOLON 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int axpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int axpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object axp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("VARS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        mm.addLeafs((Node) axp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vars",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vars ::= ID LPAR vartypes RPAR ASSIGN assignment SEMICOLON 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("VARS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        mm.addLeafs((Node) at);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vars",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // return ::= RETURN ID SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("return",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_list ::= function_declaration 
            {
              Object RESULT =null;
		int fcdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fcdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fcd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION LIST");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fcd);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_list",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_list ::= function_list function_declaration 
            {
              Object RESULT =null;
		int fclleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fclright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fcl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fcdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fcdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fcd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION LIST");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fcl);
        mm.addLeafs((Node) fcd);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_list",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_declaration ::= FUNC vartypes ID LPAR params RPAR LKEY error RKEY 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION DECLARATION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        mm.addLeafs((Node) p);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_declaration",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_declaration ::= FUNC vartypes ID LPAR params RPAR LKEY return RKEY 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION DECLARATION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        mm.addLeafs((Node) p);
        mm.addLeafs((Node) r);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_declaration",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_declaration ::= FUNC vartypes ID LPAR params RPAR LKEY statement_list return RKEY 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION DECLARATION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        mm.addLeafs((Node) p);
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) r);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_declaration",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // call_params ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("call_params",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // call_params ::= call_params COMMA ID 
            {
              Object RESULT =null;
		int cparleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cparright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cpar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("CALL PARAMS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) cpar);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("call_params",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // call_function ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("call_function",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // call_function ::= ID LPAR call_params RPAR SEMICOLON 
            {
              Object RESULT =null;
		int cparleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cparright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cpar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("CALL FUNCTION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) cpar);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("call_function",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // for_stmt ::= FOR LPAR error RPAR 
            {
              Object RESULT =null;
		
        Node mm = new Node();
        mm.setTag("FOR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // for_stmt ::= FOR LPAR INT ID SEMICOLON NUM STEP NUM RPAR LKEY RKEY 
            {
              Object RESULT =null;
		
        Node mm = new Node();
        mm.setTag("FOR STATEMENT");
        mm.setID(parser.count);
        parser.count++;

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // for_stmt ::= FOR LPAR INT ID SEMICOLON NUM STEP NUM RPAR LKEY statement_list RKEY 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("FOR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // while_stmt ::= RUN LKEY RKEY WHILE LPAR boolean_expr RPAR SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("WHILE STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("while_stmt",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // while_stmt ::= RUN LKEY statement_list RKEY WHILE LPAR boolean_expr RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("WHILE STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("while_stmt",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // else_stmt ::= ELSE LKEY statement_list RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node mm = new Node();
        mm.setTag("ELSE STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_stmt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // else_stmt ::= ELSE LKEY RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		
        Node mm = new Node();
        mm.setTag("ELSE STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_stmt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY statement_list RKEY else_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) elst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY statement_list RKEY or_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) orst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY RKEY else_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) elst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY RKEY or_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) orst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY statement_list RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) orst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY statement_list RKEY or_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) orst);
        mm.addLeafs((Node) stl);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY statement_list RKEY ENDIF error 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) stl);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY statement_list RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) stl);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY RKEY or_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) orst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_stmt ::= IF LPAR error NT$0 RPAR LKEY RKEY or_stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) orst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY RKEY ENDIF error 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= switch_stmt 
            {
              Object RESULT =null;
		int swstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int swstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object swst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT SWITCH");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) swst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= call_function 
            {
              Object RESULT =null;
		int cfstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cfstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cfst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT CALL FUNCTION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) cfst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= function_declaration 
            {
              Object RESULT =null;
		int fdstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fdstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fdst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT FUNCTION DECLARATION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fdst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= print 
            {
              Object RESULT =null;
		int pstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT PRINT");
        mm.setID(parser.count);
        
        parser.count++;
        mm.addLeafs((Node) pst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= assignvalues 
            {
              Object RESULT =null;
		int avstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int avstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object avst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT ASSIGN VALUES");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) avst);
        
        RESULT = mm;        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= assign 
            {
              Object RESULT =null;
		int astleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int astright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ast = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT ASSIGN");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) ast);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= vars 
            {
              Object RESULT =null;
		int vstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT VARS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= while_stmt 
            {
              Object RESULT =null;
		int whstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int whstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object whst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT WHILE");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) whst);

        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= if_stmt 
            {
              Object RESULT =null;
		int ifstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ifstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ifst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT IF");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) ifst);

        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= for_stmt 
            {
              Object RESULT =null;
		int fstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fst);

        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement_list ::= statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT LIST");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) st);

        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_list",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT LIST");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) st);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_list",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mmain ::= INT MAIN LPAR RPAR LKEY ENDMAIN RKEY 
            {
              Object RESULT =null;
		
        Node mm = new Node();
        mm.setTag("MAIN");
        mm.setID(parser.count);
        parser.count++;
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mmain",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mmain ::= INT MAIN LPAR RPAR LKEY statement_list ENDMAIN RKEY 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("MAIN");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node)stl);
        
        RESULT = mm;
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mmain",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= mmain function_list 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fl1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fl1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("Start");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) m1);
        mm.addLeafs((Node) fl1);
        parser.root=(Node) mm;
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= function_list mmain 
            {
              Object RESULT =null;
		int fl1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fl1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("Start");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fl1);
        mm.addLeafs((Node) m1);
        parser.root=(Node) mm;
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_list mmain function_list 
            {
              Object RESULT =null;
		int fl1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fl1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fl2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fl2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fl2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("Start");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fl1);
        mm.addLeafs((Node) m1);
        mm.addLeafs((Node) fl2);
        parser.root=(Node) mm;
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= mmain 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("Start");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) m1);
        parser.root=(Node) mm;
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

