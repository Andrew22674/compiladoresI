
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Oct 02 10:19:16 CST 2020
//----------------------------------------------------

package code;

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Oct 02 10:19:16 CST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\002\004\000\002\002\004\000\002\003\012" +
    "\000\002\003\011\000\002\015\004\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\011\012\000\002\011\012\000" +
    "\002\043\002\000\002\011\012\000\002\011\011\000\002" +
    "\011\013\000\002\011\013\000\002\011\012\000\002\011" +
    "\011\000\002\011\012\000\002\020\012\000\002\020\013" +
    "\000\002\020\011\000\002\020\011\000\002\020\012\000" +
    "\002\020\012\000\002\013\007\000\002\013\010\000\002" +
    "\021\013\000\002\021\012\000\002\014\016\000\002\014" +
    "\015\000\002\014\006\000\002\006\007\000\002\006\004" +
    "\000\002\023\005\000\002\023\003\000\002\007\014\000" +
    "\002\007\013\000\002\007\013\000\002\010\004\000\002" +
    "\010\003\000\002\025\005\000\002\025\005\000\002\031" +
    "\003\000\002\031\003\000\002\004\011\000\002\037\006" +
    "\000\002\040\003\000\002\040\005\000\002\040\004\000" +
    "\002\040\005\000\002\040\005\000\002\041\003\000\002" +
    "\041\005\000\002\035\003\000\002\035\005\000\002\042" +
    "\003\000\002\042\005\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\005\000" +
    "\002\033\003\000\002\033\003\000\002\032\011\000\002" +
    "\032\005\000\002\034\010\000\002\034\010\000\002\034" +
    "\007\000\002\034\011\000\002\034\011\000\002\034\010" +
    "\000\002\012\006\000\002\012\007\000\002\012\004\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\005\000\002\030\010\000\002\030\003\000\002\017" +
    "\004\000\002\017\006\000\002\017\003\000\002\017\005" +
    "\000\002\017\005\000\002\026\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\024\004\000\002\024\006\000\002\024\006\000" +
    "\002\022\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\006\026\004\050\011\001\002\000\014\010" +
    "\266\011\270\041\271\050\272\055\267\001\002\000\006" +
    "\026\004\050\011\001\002\000\004\002\347\001\002\000" +
    "\006\002\000\026\004\001\002\000\010\002\uffce\026\uffce" +
    "\050\uffce\001\002\000\004\030\012\001\002\000\004\013" +
    "\013\001\002\000\004\014\014\001\002\000\004\006\015" +
    "\001\002\000\026\003\040\015\022\021\024\025\043\026" +
    "\004\042\027\053\032\063\036\065\034\066\025\001\002" +
    "\000\034\003\ufff6\007\ufff6\015\ufff6\021\ufff6\025\ufff6\026" +
    "\ufff6\042\ufff6\045\ufff6\053\ufff6\056\ufff6\063\ufff6\065\ufff6" +
    "\066\ufff6\001\002\000\034\003\ufff9\007\ufff9\015\ufff9\021" +
    "\ufff9\025\ufff9\026\ufff9\042\ufff9\045\ufff9\053\ufff9\056\ufff9" +
    "\063\ufff9\065\ufff9\066\ufff9\001\002\000\034\003\ufff2\007" +
    "\ufff2\015\ufff2\021\ufff2\025\ufff2\026\ufff2\042\ufff2\045\ufff2" +
    "\053\ufff2\056\ufff2\063\ufff2\065\ufff2\066\ufff2\001\002\000" +
    "\034\003\ufff0\007\ufff0\015\ufff0\021\ufff0\025\ufff0\026\ufff0" +
    "\042\ufff0\045\ufff0\053\ufff0\056\ufff0\063\ufff0\065\ufff0\066" +
    "\ufff0\001\002\000\006\003\311\013\312\001\002\000\006" +
    "\013\234\054\235\001\002\000\004\013\154\001\002\000" +
    "\030\013\uffcb\014\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\054\uffcb\064\uffcb\001\002\000" +
    "\034\003\ufff1\007\ufff1\015\ufff1\021\ufff1\025\ufff1\026\ufff1" +
    "\042\ufff1\045\ufff1\053\ufff1\056\ufff1\063\ufff1\065\ufff1\066" +
    "\ufff1\001\002\000\030\013\uffca\014\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\036\uffca\037\uffca\040\uffca\054\uffca\064" +
    "\uffca\001\002\000\026\003\040\015\022\021\024\025\043" +
    "\026\004\042\027\053\152\063\036\065\034\066\025\001" +
    "\002\000\034\003\uffef\007\uffef\015\uffef\021\uffef\025\uffef" +
    "\026\uffef\042\uffef\045\uffef\053\uffef\056\uffef\063\uffef\065" +
    "\uffef\066\uffef\001\002\000\004\007\151\001\002\000\034" +
    "\003\ufff5\007\ufff5\015\ufff5\021\ufff5\025\ufff5\026\ufff5\042" +
    "\ufff5\045\ufff5\053\ufff5\056\ufff5\063\ufff5\065\ufff5\066\ufff5" +
    "\001\002\000\004\006\101\001\002\000\034\003\ufff3\007" +
    "\ufff3\015\ufff3\021\ufff3\025\ufff3\026\ufff3\042\ufff3\045\ufff3" +
    "\053\ufff3\056\ufff3\063\ufff3\065\ufff3\066\ufff3\001\002\000" +
    "\004\013\066\001\002\000\034\003\ufff4\007\ufff4\015\ufff4" +
    "\021\ufff4\025\ufff4\026\ufff4\042\ufff4\045\ufff4\053\ufff4\056" +
    "\ufff4\063\ufff4\065\ufff4\066\ufff4\001\002\000\036\003\uffee" +
    "\007\uffee\015\uffee\021\uffee\025\uffee\026\uffee\040\065\042" +
    "\uffee\045\uffee\053\uffee\056\uffee\063\uffee\065\uffee\066\uffee" +
    "\001\002\000\034\003\ufff7\007\ufff7\015\ufff7\021\ufff7\025" +
    "\ufff7\026\ufff7\042\ufff7\045\ufff7\053\ufff7\056\ufff7\063\ufff7" +
    "\065\ufff7\066\ufff7\001\002\000\034\003\ufff8\007\ufff8\015" +
    "\ufff8\021\ufff8\025\ufff8\026\ufff8\042\ufff8\045\ufff8\053\ufff8" +
    "\056\ufff8\063\ufff8\065\ufff8\066\ufff8\001\002\000\004\013" +
    "\044\001\002\000\006\003\045\050\046\001\002\000\004" +
    "\014\064\001\002\000\004\066\047\001\002\000\004\040" +
    "\050\001\002\000\006\004\053\005\051\001\002\000\030" +
    "\007\uffb7\012\uffb7\014\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\057\uffb7\001\002\000\004" +
    "\057\054\001\002\000\030\007\uffb6\012\uffb6\014\uffb6\031" +
    "\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\057\uffb6\001\002\000\006\004\053\005\051\001\002\000" +
    "\004\014\056\001\002\000\004\006\057\001\002\000\026" +
    "\003\040\007\060\015\022\021\024\025\043\026\004\042" +
    "\027\063\036\065\034\066\025\001\002\000\034\003\uffd8" +
    "\007\uffd8\015\uffd8\021\uffd8\025\uffd8\026\uffd8\042\uffd8\045" +
    "\uffd8\053\uffd8\056\uffd8\063\uffd8\065\uffd8\066\uffd8\001\002" +
    "\000\026\003\040\007\063\015\022\021\024\025\043\026" +
    "\004\042\027\063\036\065\034\066\025\001\002\000\034" +
    "\003\ufffa\007\ufffa\015\ufffa\021\ufffa\025\ufffa\026\ufffa\042" +
    "\ufffa\045\ufffa\053\ufffa\056\ufffa\063\ufffa\065\ufffa\066\ufffa" +
    "\001\002\000\034\003\uffd9\007\uffd9\015\uffd9\021\uffd9\025" +
    "\uffd9\026\uffd9\042\uffd9\045\uffd9\053\uffd9\056\uffd9\063\uffd9" +
    "\065\uffd9\066\uffd9\001\002\000\034\003\uffd7\007\uffd7\015" +
    "\uffd7\021\uffd7\025\uffd7\026\uffd7\042\uffd7\045\uffd7\053\uffd7" +
    "\056\uffd7\063\uffd7\065\uffd7\066\uffd7\001\002\000\034\003" +
    "\uffd5\007\uffd5\015\uffd5\021\uffd5\025\uffd5\026\uffd5\042\uffd5" +
    "\045\uffd5\053\uffd5\056\uffd5\063\uffd5\065\uffd5\066\uffd5\001" +
    "\002\000\020\004\053\005\051\042\027\043\074\060\071" +
    "\061\072\066\025\001\002\000\014\014\uffbc\031\uffbc\033" +
    "\uffbc\037\uffbc\040\uffbc\001\002\000\004\014\077\001\002" +
    "\000\014\014\uffba\031\uffba\033\uffba\037\uffba\040\uffba\001" +
    "\002\000\014\014\uffb9\031\uffb9\033\uffb9\037\uffb9\040\uffb9" +
    "\001\002\000\014\014\uffbb\031\uffbb\033\uffbb\037\uffbb\040" +
    "\uffbb\001\002\000\004\042\075\001\002\000\004\043\076" +
    "\001\002\000\014\014\uffb8\031\uffb8\033\uffb8\037\uffb8\040" +
    "\uffb8\001\002\000\004\040\100\001\002\000\034\003\uff90" +
    "\007\uff90\015\uff90\021\uff90\025\uff90\026\uff90\042\uff90\045" +
    "\uff90\053\uff90\056\uff90\063\uff90\065\uff90\066\uff90\001\002" +
    "\000\026\003\040\007\102\015\022\021\024\025\043\026" +
    "\004\042\027\063\036\065\034\066\025\001\002\000\004" +
    "\024\144\001\002\000\026\003\040\007\104\015\022\021" +
    "\024\025\043\026\004\042\027\063\036\065\034\066\025" +
    "\001\002\000\004\024\105\001\002\000\004\013\106\001" +
    "\002\000\022\004\053\005\051\013\111\042\027\060\110" +
    "\061\112\062\115\066\025\001\002\000\012\014\uff9c\032" +
    "\137\034\uff9c\064\136\001\002\000\006\014\uff9e\034\uff9e" +
    "\001\002\000\024\003\131\004\053\005\051\013\111\042" +
    "\027\060\110\061\112\062\115\066\025\001\002\000\006" +
    "\014\uff9d\034\uff9d\001\002\000\004\032\127\001\002\000" +
    "\006\014\uffa2\034\124\001\002\000\012\042\027\060\121" +
    "\061\122\066\025\001\002\000\004\014\117\001\002\000" +
    "\004\040\120\001\002\000\034\003\uffdb\007\uffdb\015\uffdb" +
    "\021\uffdb\025\uffdb\026\uffdb\042\uffdb\045\uffdb\053\uffdb\056" +
    "\uffdb\063\uffdb\065\uffdb\066\uffdb\001\002\000\006\014\uff95" +
    "\034\uff95\001\002\000\006\014\uff94\034\uff94\001\002\000" +
    "\006\014\uff96\034\uff96\001\002\000\022\004\053\005\051" +
    "\013\111\042\027\060\110\061\112\062\115\066\025\001" +
    "\002\000\004\014\uffa4\001\002\000\004\014\uff9f\001\002" +
    "\000\006\042\027\066\025\001\002\000\006\014\uff97\034" +
    "\uff97\001\002\000\004\014\135\001\002\000\004\014\133" +
    "\001\002\000\006\014\uffa1\034\124\001\002\000\004\014" +
    "\uffa3\001\002\000\004\014\uffa0\001\002\000\012\004\053" +
    "\005\051\042\027\066\025\001\002\000\012\004\053\005" +
    "\051\042\027\066\025\001\002\000\006\014\uff98\034\uff98" +
    "\001\002\000\006\014\uff9a\034\uff9a\001\002\000\006\014" +
    "\uff99\034\uff99\001\002\000\006\014\uff9b\034\uff9b\001\002" +
    "\000\004\013\145\001\002\000\022\004\053\005\051\013" +
    "\111\042\027\060\110\061\112\062\115\066\025\001\002" +
    "\000\004\014\147\001\002\000\004\040\150\001\002\000" +
    "\034\003\uffda\007\uffda\015\uffda\021\uffda\025\uffda\026\uffda" +
    "\042\uffda\045\uffda\053\uffda\056\uffda\063\uffda\065\uffda\066" +
    "\uffda\001\002\000\006\002\ufffb\026\ufffb\001\002\000\004" +
    "\007\153\001\002\000\006\002\ufffc\026\ufffc\001\002\000" +
    "\024\003\155\004\053\005\051\013\111\042\027\060\110" +
    "\061\112\062\115\066\025\001\002\000\004\014\uffeb\001" +
    "\002\000\004\014\157\001\002\000\004\006\160\001\002" +
    "\000\026\003\040\007\161\015\022\021\024\025\043\026" +
    "\004\042\027\063\036\065\034\066\025\001\002\000\010" +
    "\022\223\023\170\052\165\001\002\000\026\003\040\007" +
    "\163\015\022\021\024\025\043\026\004\042\027\063\036" +
    "\065\034\066\025\001\002\000\010\022\166\023\170\052" +
    "\165\001\002\000\034\003\uffe4\007\uffe4\015\uffe4\021\uffe4" +
    "\025\uffe4\026\uffe4\042\uffe4\045\uffe4\053\uffe4\056\uffe4\063" +
    "\uffe4\065\uffe4\066\uffe4\001\002\000\004\006\212\001\002" +
    "\000\006\003\211\040\210\001\002\000\034\003\uffe6\007" +
    "\uffe6\015\uffe6\021\uffe6\025\uffe6\026\uffe6\042\uffe6\045\uffe6" +
    "\053\uffe6\056\uffe6\063\uffe6\065\uffe6\066\uffe6\001\002\000" +
    "\004\013\171\001\002\000\022\004\053\005\051\013\111" +
    "\042\027\060\110\061\112\062\115\066\025\001\002\000" +
    "\004\014\173\001\002\000\004\006\174\001\002\000\026" +
    "\003\040\007\175\015\022\021\024\025\043\026\004\042" +
    "\027\063\036\065\034\066\025\001\002\000\010\022\205" +
    "\023\170\052\165\001\002\000\026\003\040\007\177\015" +
    "\022\021\024\025\043\026\004\042\027\063\036\065\034" +
    "\066\025\001\002\000\010\022\201\023\170\052\165\001" +
    "\002\000\034\003\uffde\007\uffde\015\uffde\021\uffde\025\uffde" +
    "\026\uffde\042\uffde\045\uffde\053\uffde\056\uffde\063\uffde\065" +
    "\uffde\066\uffde\001\002\000\004\040\203\001\002\000\034" +
    "\003\uffdf\007\uffdf\015\uffdf\021\uffdf\025\uffdf\026\uffdf\042" +
    "\uffdf\045\uffdf\053\uffdf\056\uffdf\063\uffdf\065\uffdf\066\uffdf" +
    "\001\002\000\034\003\uffe2\007\uffe2\015\uffe2\021\uffe2\025" +
    "\uffe2\026\uffe2\042\uffe2\045\uffe2\053\uffe2\056\uffe2\063\uffe2" +
    "\065\uffe2\066\uffe2\001\002\000\034\003\uffe0\007\uffe0\015" +
    "\uffe0\021\uffe0\025\uffe0\026\uffe0\042\uffe0\045\uffe0\053\uffe0" +
    "\056\uffe0\063\uffe0\065\uffe0\066\uffe0\001\002\000\004\040" +
    "\207\001\002\000\034\003\uffe1\007\uffe1\015\uffe1\021\uffe1" +
    "\025\uffe1\026\uffe1\042\uffe1\045\uffe1\053\uffe1\056\uffe1\063" +
    "\uffe1\065\uffe1\066\uffe1\001\002\000\034\003\uffe3\007\uffe3" +
    "\015\uffe3\021\uffe3\025\uffe3\026\uffe3\042\uffe3\045\uffe3\053" +
    "\uffe3\056\uffe3\063\uffe3\065\uffe3\066\uffe3\001\002\000\034" +
    "\003\uffe8\007\uffe8\015\uffe8\021\uffe8\025\uffe8\026\uffe8\042" +
    "\uffe8\045\uffe8\053\uffe8\056\uffe8\063\uffe8\065\uffe8\066\uffe8" +
    "\001\002\000\034\003\uffe7\007\uffe7\015\uffe7\021\uffe7\025" +
    "\uffe7\026\uffe7\042\uffe7\045\uffe7\053\uffe7\056\uffe7\063\uffe7" +
    "\065\uffe7\066\uffe7\001\002\000\026\003\040\007\213\015" +
    "\022\021\024\025\043\026\004\042\027\063\036\065\034" +
    "\066\025\001\002\000\004\022\220\001\002\000\026\003" +
    "\040\007\215\015\022\021\024\025\043\026\004\042\027" +
    "\063\036\065\034\066\025\001\002\000\004\022\216\001" +
    "\002\000\004\040\217\001\002\000\034\003\uffdc\007\uffdc" +
    "\015\uffdc\021\uffdc\025\uffdc\026\uffdc\042\uffdc\045\uffdc\053" +
    "\uffdc\056\uffdc\063\uffdc\065\uffdc\066\uffdc\001\002\000\004" +
    "\040\221\001\002\000\034\003\uffdd\007\uffdd\015\uffdd\021" +
    "\uffdd\025\uffdd\026\uffdd\042\uffdd\045\uffdd\053\uffdd\056\uffdd" +
    "\063\uffdd\065\uffdd\066\uffdd\001\002\000\034\003\uffe5\007" +
    "\uffe5\015\uffe5\021\uffe5\025\uffe5\026\uffe5\042\uffe5\045\uffe5" +
    "\053\uffe5\056\uffe5\063\uffe5\065\uffe5\066\uffe5\001\002\000" +
    "\006\003\226\040\225\001\002\000\034\003\uffe9\007\uffe9" +
    "\015\uffe9\021\uffe9\025\uffe9\026\uffe9\042\uffe9\045\uffe9\053" +
    "\uffe9\056\uffe9\063\uffe9\065\uffe9\066\uffe9\001\002\000\034" +
    "\003\uffed\007\uffed\015\uffed\021\uffed\025\uffed\026\uffed\042" +
    "\uffed\045\uffed\053\uffed\056\uffed\063\uffed\065\uffed\066\uffed" +
    "\001\002\000\034\003\uffec\007\uffec\015\uffec\021\uffec\025" +
    "\uffec\026\uffec\042\uffec\045\uffec\053\uffec\056\uffec\063\uffec" +
    "\065\uffec\066\uffec\001\002\000\004\014\230\001\002\000" +
    "\004\006\231\001\002\000\004\007\232\001\002\000\004" +
    "\023\170\001\002\000\034\003\uffea\007\uffea\015\uffea\021" +
    "\uffea\025\uffea\026\uffea\042\uffea\045\uffea\053\uffea\056\uffea" +
    "\063\uffea\065\uffea\066\uffea\001\002\000\016\010\266\011" +
    "\270\041\271\050\272\055\267\066\264\001\002\000\026" +
    "\004\053\005\051\006\241\013\240\042\027\043\074\044" +
    "\243\060\071\061\072\066\025\001\002\000\012\014\uffbe" +
    "\031\uffbe\033\uffbe\040\uffbe\001\002\000\012\014\uffc7\031" +
    "\uffc7\033\250\040\uffc7\001\002\000\026\004\053\005\051" +
    "\006\241\013\240\042\027\043\074\044\243\060\071\061" +
    "\072\066\025\001\002\000\010\004\053\005\051\007\256" +
    "\001\002\000\012\014\uffc2\031\uffc2\033\uffc2\040\uffc2\001" +
    "\002\000\004\042\252\001\002\000\006\031\245\040\246" +
    "\001\002\000\022\004\053\005\051\013\240\042\027\043" +
    "\074\060\071\061\072\066\025\001\002\000\034\003\uffc8" +
    "\007\uffc8\015\uffc8\021\uffc8\025\uffc8\026\uffc8\042\uffc8\045" +
    "\uffc8\053\uffc8\056\uffc8\063\uffc8\065\uffc8\066\uffc8\001\002" +
    "\000\012\014\uffc6\031\uffc6\033\250\040\uffc6\001\002\000" +
    "\022\004\053\005\051\013\240\042\027\043\074\060\071" +
    "\061\072\066\025\001\002\000\012\014\uffc1\031\uffc1\033" +
    "\uffc1\040\uffc1\001\002\000\004\044\253\001\002\000\010" +
    "\014\uffc3\031\uffc3\040\uffc3\001\002\000\004\007\261\001" +
    "\002\000\006\007\uffc0\036\257\001\002\000\010\014\uffc5" +
    "\031\uffc5\040\uffc5\001\002\000\006\004\053\005\051\001" +
    "\002\000\004\007\uffbf\001\002\000\010\014\uffc4\031\uffc4" +
    "\040\uffc4\001\002\000\006\014\263\031\245\001\002\000" +
    "\012\014\uffbd\031\uffbd\033\uffbd\040\uffbd\001\002\000\006" +
    "\014\uffd3\036\uffd3\001\002\000\004\014\305\001\002\000" +
    "\006\004\053\005\051\001\002\000\010\014\uffa5\042\uffa5" +
    "\066\uffa5\001\002\000\010\014\uffa9\042\uffa9\066\uffa9\001" +
    "\002\000\010\014\uffa8\042\uffa8\066\uffa8\001\002\000\010" +
    "\014\uffaa\042\uffaa\066\uffaa\001\002\000\006\014\275\036" +
    "\274\001\002\000\004\066\277\001\002\000\004\040\276" +
    "\001\002\000\034\003\uffd6\007\uffd6\015\uffd6\021\uffd6\025" +
    "\uffd6\026\uffd6\042\uffd6\045\uffd6\053\uffd6\056\uffd6\063\uffd6" +
    "\065\uffd6\066\uffd6\001\002\000\006\014\uffd4\036\uffd4\001" +
    "\002\000\004\012\301\001\002\000\012\010\302\014\uffa7" +
    "\042\uffa7\066\uffa7\001\002\000\006\004\053\005\051\001" +
    "\002\000\004\012\304\001\002\000\010\014\uffa6\042\uffa6" +
    "\066\uffa6\001\002\000\004\054\306\001\002\000\026\004" +
    "\053\005\051\006\241\013\240\042\027\043\074\044\243" +
    "\060\071\061\072\066\025\001\002\000\006\031\245\040" +
    "\310\001\002\000\034\003\uffc9\007\uffc9\015\uffc9\021\uffc9" +
    "\025\uffc9\026\uffc9\042\uffc9\045\uffc9\053\uffc9\056\uffc9\063" +
    "\uffc9\065\uffc9\066\uffc9\001\002\000\004\007\344\001\002" +
    "\000\006\042\027\066\025\001\002\000\004\014\314\001" +
    "\002\000\004\006\315\001\002\000\004\027\317\001\002" +
    "\000\004\007\343\001\002\000\020\004\053\005\051\042" +
    "\027\043\074\060\071\061\072\066\025\001\002\000\004" +
    "\037\321\001\002\000\026\003\040\015\022\021\024\025" +
    "\043\026\004\042\027\045\322\063\036\065\034\066\025" +
    "\001\002\000\004\040\340\001\002\000\026\003\040\015" +
    "\022\021\024\025\043\026\004\042\027\045\324\063\036" +
    "\065\034\066\025\001\002\000\004\040\325\001\002\000" +
    "\010\007\uffae\027\317\047\326\001\002\000\006\003\331" +
    "\037\332\001\002\000\004\007\uffaf\001\002\000\004\007" +
    "\uffb0\001\002\000\004\007\uffab\001\002\000\026\003\040" +
    "\015\022\021\024\025\043\026\004\042\027\045\333\063" +
    "\036\065\034\066\025\001\002\000\004\040\337\001\002" +
    "\000\026\003\040\015\022\021\024\025\043\026\004\042" +
    "\027\045\335\063\036\065\034\066\025\001\002\000\004" +
    "\040\336\001\002\000\004\007\uffac\001\002\000\004\007" +
    "\uffad\001\002\000\010\007\uffb1\027\317\047\326\001\002" +
    "\000\004\007\uffb2\001\002\000\004\007\uffb3\001\002\000" +
    "\034\003\uffb5\007\uffb5\015\uffb5\021\uffb5\025\uffb5\026\uffb5" +
    "\042\uffb5\045\uffb5\053\uffb5\056\uffb5\063\uffb5\065\uffb5\066" +
    "\uffb5\001\002\000\034\003\uffb4\007\uffb4\015\uffb4\021\uffb4" +
    "\025\uffb4\026\uffb4\042\uffb4\045\uffb4\053\uffb4\056\uffb4\063" +
    "\uffb4\065\uffb4\066\uffb4\001\002\000\006\002\ufffd\026\004" +
    "\001\002\000\010\002\uffcf\026\uffcf\050\uffcf\001\002\000" +
    "\004\002\001\001\002\000\006\002\ufffe\026\004\001\002" +
    "\000\006\002\uffff\026\004\001\002\000\006\042\027\066" +
    "\025\001\002\000\004\013\354\001\002\000\014\010\266" +
    "\011\270\041\271\050\272\055\267\001\002\000\006\042" +
    "\027\066\025\001\002\000\004\014\357\001\002\000\004" +
    "\006\360\001\002\000\026\003\363\015\022\021\024\025" +
    "\043\026\004\042\027\056\361\063\036\065\034\066\025" +
    "\001\002\000\012\004\053\005\051\042\027\066\025\001" +
    "\002\000\026\003\040\015\022\021\024\025\043\026\004" +
    "\042\027\056\361\063\036\065\034\066\025\001\002\000" +
    "\032\003\uffee\007\366\015\uffee\021\uffee\025\uffee\026\uffee" +
    "\040\065\042\uffee\056\uffee\063\uffee\065\uffee\066\uffee\001" +
    "\002\000\004\007\365\001\002\000\040\002\uffd1\003\uffd1" +
    "\007\uffd1\015\uffd1\021\uffd1\025\uffd1\026\uffd1\042\uffd1\045" +
    "\uffd1\050\uffd1\053\uffd1\056\uffd1\063\uffd1\065\uffd1\066\uffd1" +
    "\001\002\000\040\002\uffd0\003\uffd0\007\uffd0\015\uffd0\021" +
    "\uffd0\025\uffd0\026\uffd0\042\uffd0\045\uffd0\050\uffd0\053\uffd0" +
    "\056\uffd0\063\uffd0\065\uffd0\066\uffd0\001\002\000\004\007" +
    "\370\001\002\000\040\002\uffd2\003\uffd2\007\uffd2\015\uffd2" +
    "\021\uffd2\025\uffd2\026\uffd2\042\uffd2\045\uffd2\050\uffd2\053" +
    "\uffd2\056\uffd2\063\uffd2\065\uffd2\066\uffd2\001\002\000\004" +
    "\040\374\001\002\000\004\040\373\001\002\000\004\007" +
    "\uffcd\001\002\000\004\007\uffcc\001\002\000\006\014\uff93" +
    "\036\376\001\002\000\016\003\377\010\266\011\270\041" +
    "\271\050\272\055\267\001\002\000\004\014\uff91\001\002" +
    "\000\004\014\uff92\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\012\002\005\003\006\007\007\010\004\001" +
    "\001\000\004\030\351\001\001\000\006\003\347\007\345" +
    "\001\001\000\002\001\001\000\006\007\007\010\344\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\032\006" +
    "\020\007\025\011\040\014\041\015\027\016\016\021\015" +
    "\022\017\031\022\032\030\036\036\037\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\004\032\006\020\007\025\011\040\014\041\016" +
    "\061\021\015\022\017\031\022\032\030\036\036\037\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\033" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\033\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\032\006\020\007\025\011\040" +
    "\014\041\015\060\016\016\021\015\022\017\031\022\032" +
    "\030\036\036\037\034\001\001\000\002\001\001\000\032" +
    "\004\032\006\020\007\025\011\040\014\041\016\061\021" +
    "\015\022\017\031\022\032\030\036\036\037\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\067\031\066\033\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\032\006\020\007\025\011\040\014\041" +
    "\015\102\016\016\021\015\022\017\031\022\032\030\036" +
    "\036\037\034\001\001\000\002\001\001\000\032\004\032" +
    "\006\020\007\025\011\040\014\041\016\061\021\015\022" +
    "\017\031\022\032\030\036\036\037\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\113\017\115\031" +
    "\106\033\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\113\017\131\031\106\033\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\124\001\001" +
    "\000\004\031\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\113\017\125\031\106\033" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\142\033\141\001\001\000" +
    "\006\031\140\033\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\113\017\145\031\106\033\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\113\017\155\031\106\033\112\001\001\000\004\043" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\032\006\020\007\025\011\040\014\041\015\161\016" +
    "\016\021\015\022\017\031\022\032\030\036\036\037\034" +
    "\001\001\000\006\013\221\020\223\001\001\000\032\004" +
    "\032\006\020\007\025\011\040\014\041\016\061\021\015" +
    "\022\017\031\022\032\030\036\036\037\034\001\001\000" +
    "\006\013\163\020\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\113\017\171\031\106\033\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\032\006" +
    "\020\007\025\011\040\014\041\015\175\016\016\021\015" +
    "\022\017\031\022\032\030\036\036\037\034\001\001\000" +
    "\006\013\203\020\205\001\001\000\032\004\032\006\020" +
    "\007\025\011\040\014\041\016\061\021\015\022\017\031" +
    "\022\032\030\036\036\037\034\001\001\000\006\013\177" +
    "\020\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\032\006\020\007\025" +
    "\011\040\014\041\015\213\016\016\021\015\022\017\031" +
    "\022\032\030\036\036\037\034\001\001\000\002\001\001" +
    "\000\032\004\032\006\020\007\025\011\040\014\041\016" +
    "\061\021\015\022\017\031\022\032\030\036\036\037\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\232\001\001\000\002\001\001\000" +
    "\006\023\272\030\264\001\001\000\016\027\235\031\066" +
    "\033\072\040\243\041\236\042\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\027\235\031\066\033\072" +
    "\040\261\041\236\042\241\001\001\000\006\033\254\035" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\027\235\031\066\033\072\041\246\042" +
    "\241\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\235\031\066\033\072\042\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\254\035" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\027\235\031\066\033\072\040" +
    "\306\041\236\042\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\315\001\001" +
    "\000\002\001\001\000\010\027\317\031\066\033\072\001" +
    "\001\000\002\001\001\000\034\004\032\006\020\007\025" +
    "\011\040\014\041\015\322\016\016\021\015\022\017\031" +
    "\022\032\030\036\036\037\034\001\001\000\002\001\001" +
    "\000\032\004\032\006\020\007\025\011\040\014\041\016" +
    "\061\021\015\022\017\031\022\032\030\036\036\037\034" +
    "\001\001\000\002\001\001\000\006\012\326\034\327\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\032\006\020\007\025\011" +
    "\040\014\041\015\333\016\016\021\015\022\017\031\022" +
    "\032\030\036\036\037\034\001\001\000\002\001\001\000" +
    "\032\004\032\006\020\007\025\011\040\014\041\016\061" +
    "\021\015\022\017\031\022\032\030\036\036\037\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\340\034\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\345\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\007\010\350\001\001\000\004\007\345\001\001" +
    "\000\004\031\352\001\001\000\002\001\001\000\006\024" +
    "\355\030\354\001\001\000\004\031\374\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\032\006\020\007" +
    "\025\011\040\014\041\015\361\016\016\021\015\022\017" +
    "\025\363\031\022\032\030\036\036\037\034\001\001\000" +
    "\006\031\371\033\370\001\001\000\034\004\032\006\020" +
    "\007\025\011\040\014\041\016\061\021\015\022\017\025" +
    "\366\031\022\032\030\036\036\037\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\377\030\354\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

public int count = 0;
public static Node root;
ArrayList<String> errors = new ArrayList();

 private Symbol s;

    public Node getRoot(){
        return this.root;
    }
    
    
    /*public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Error en linea " + (s.left+1) + "\n" + "columna " + s.right + "\nidentificador: " + s.value + " no reconocido.");
    }

    public void unrecovered_syntax_Error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en linea " + (s.left+1) + "\n" + "columna " + s.right + "\nidentificador: " + s.value + " no reconocido 2.");
    }

    

    public Symbol getS(){
        return this.s;
}*/


    /*public static Scanner s2;
    int myerrors = 0;

    @Override
    public void report_error(String message, Object info) {
    if (info instanceof String){
	myerrors++; 
      System.err.println("  "+ myerrors + "==> " + info + " "+ message + 
					"\n       Parsing resumed from 2nd token before" + s2.current_lexeme()+"\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }*/
     @Override
    public void syntax_error(Symbol s){
        String lexVal = s.value != null ? s.value.toString() : getToken(s.sym);
        String err = "";
        if(lexVal.equals("EOF")){
            err = "Error found: expected }";
        } else {
            err = "Error found: " +  " line: " + (s.left+1) + " column: " + s.right + ", No se esperaba: " + lexVal;
        }
        System.err.println(err);
        errors.add(err);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexVal = s.value != null ? s.value.toString() : getToken(s.sym);
        String err = "";
        if(lexVal.equals("EOF")){
            err = "";
        }else{
            err = "Unrecoverd error! Error found: " + " line: " + (s.left+1) + " column: " + s.right + ", No se esperaba: " + lexVal;
        }
        System.err.println(err);
        errors.add(err);
    }

    public String getToken(int id){
        String name = "";
        name = terminals.myterminals[id];
        //System.out.println("name: " + name);
        switch(id){
 
            default:
                return name;
    }
}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // print ::= PRINT LPAR assignment RPAR SEMICOLON 
            {
              Object RESULT =null;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object assig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("PRINT");
        mm.setID(parser.count);
        parser.count++;
        Node child = new Node(mm, (String)assig);
        mm.addLeafs(child);
        //mm.addLeafs((Node) assig);
        
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("print",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // params ::= vartypes id_or_letter COMMA error 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
      Node mm = new Node();
        mm.setTag("PARAMS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // params ::= vartypes id_or_letter COMMA params 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		      
            Node mm = new Node();
            mm.setTag("PARAMS");
            mm.setID(parser.count);
            parser.count++;
            mm.addLeafs((Node) vt);
            mm.addLeafs((Node) p);

            RESULT=mm;
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // params ::= vartypes id_or_letter 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
      Node mm = new Node();
        mm.setTag("PARAMS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("params",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tokens_boolean ::= NOT FALSE 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tokens_boolean ::= NOT TRUE 
            {
              Object RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tokens_boolean ::= NOT id_or_letter 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tokens_boolean ::= assign_num RELOP id_or_letter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tokens_boolean ::= id_or_letter RELOP assign_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tokens_boolean ::= id_or_letter EQ assign_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tokens_boolean ::= id_or_letter RELOP id_or_letter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tokens_boolean ::= id_or_letter EQ id_or_letter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tokens_boolean ::= id_or_letter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tokens_boolean ::= FALSE 
            {
              Object RESULT =null;
		int Falseleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Falseright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object False = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tokens_boolean ::= TRUE 
            {
              Object RESULT =null;
		int Trueleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int Trueright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object True = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // boolean_expr_cont ::= LOGOP boolean_expr 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
      Node mm = new Node();
        mm.setTag("BOOLEAN EXPRETION COUNT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr_cont",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // boolean_expr ::= LPAR error RPAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // boolean_expr ::= LPAR boolean_expr RPAR 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
      Node mm = new Node();
        mm.setTag("BOOLEAN EXPR");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolean_expr ::= tokens_boolean 
            {
              Object RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("BOOLEAN EXPR");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) tb);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // boolean_expr ::= LPAR boolean_expr RPAR boolean_expr_cont 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bexpcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bexpcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bexpc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("BOOLEAN EXPR");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) bexpc);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // boolean_expr ::= tokens_boolean boolean_expr_cont 
            {
              Object RESULT =null;
		int tbleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tbright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object tb = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int bexpcleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bexpcright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object bexpc = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("BOOLEAN EXPR");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) tb);
        mm.addLeafs((Node) bexpc);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("boolean_expr",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // vartypes ::= NONE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vartypes",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // vartypes ::= LBRA assign_num RBRA LBRA assign_num RBRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vartypes",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // vartypes ::= LBRA assign_num RBRA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vartypes",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // vartypes ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vartypes",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // vartypes ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vartypes",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // vartypes ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vartypes",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // default_stmt ::= DEFAULT error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("default_stmt",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // default_stmt ::= DEFAULT COLON statement_list END SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("DEFAULT STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("default_stmt",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // default_stmt ::= DEFAULT COLON END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("default_stmt",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // case_stmt ::= CASE assignment COLON statement_list END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // case_stmt ::= CASE assignment COLON statement_list END SEMICOLON default_stmt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // case_stmt ::= CASE assignment COLON statement_list END SEMICOLON case_stmt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // case_stmt ::= CASE assignment COLON END SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // case_stmt ::= CASE assignment COLON END SEMICOLON default_stmt 
            {
              Object RESULT =null;
		int dfltleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dfltright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object dflt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("DEFAULT STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) dflt);
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // case_stmt ::= CASE assignment COLON END SEMICOLON case_stmt 
            {
              Object RESULT =null;
		int cstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("CASE STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) cst);
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("case_stmt",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // switch_stmt ::= SWITCH error RKEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("switch_stmt",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // switch_stmt ::= SWITCH LPAR id_or_letter RPAR LKEY case_stmt RKEY 
            {
              Object RESULT =null;
		int cstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("SWITCH STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) cst);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("switch_stmt",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // assign_num ::= DIGIT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = Integer.toString(d);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_num",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assign_num ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    RESULT = Integer.toString(n);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_num",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment ::= QUOTATION LETTER QUOTATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignment ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignment ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignment ::= assign_num 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 Node mm = new Node();
    mm.setTag("NUM");
    mm.setValue((String)as);
    mm.setID(parser.count);
    parser.count++;
    RESULT = mm; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignment ::= id_or_letter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignment",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= LPAR assign_expr RPAR 
            {
              Object RESULT =null;
		int axpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int axpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object axp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("FACTOR");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) axp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= assignment 
            {
              Object RESULT =null;
		int assigleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int assigright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object assig = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        //mm.setValue((String)assig);
        mm.setTag("FACTOR");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) assig);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // num_list ::= assign_num COMMA num_list 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("num_list",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // num_list ::= assign_num 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("num_list",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= term MULTOP factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("mult_expr");
        mm.setID(parser.count);
        parser.count++;
        Node child = new Node(mm, (String) m);
        child.setTag("MULT");
        child.setID(parser.count);
        parser.count++;
        /*Node multi = new Node(mm, (String)m);
        multi.setTag("*");
        mm.addLeafs(multi);*/
        mm.addLeafs((Node) child);
        child.addLeafs((Node) t);
        child.addLeafs((Node) f);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("TERM");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) f);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("term",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assign_expr ::= QUOTE LETTER QUOTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assign_expr ::= LKEY num_list RKEY 
            {
              Object RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object nl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		  Node mm = new Node();
            mm.setTag("Num list");
            mm.setID(parser.count);
            parser.count++; 
            RESULT = mm;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assign_expr ::= LKEY RKEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_expr ::= assign_expr SUMOP term 
            {
              Object RESULT =null;
		int axpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int axpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object axp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object sum = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        Node child= new Node(mm, (String)sum);
        child.setTag("SUM");
        mm.setTag("ADD EXPRESION");
        mm.setID(parser.count);
        parser.count++;
        child.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node)child);
        child.addLeafs((Node) axp);
        child.addLeafs((Node) t);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_expr ::= term 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("ASSIGN EXPRESION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) t);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assign_expr",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // assignvalues ::= id_or_letter ASSIGN assign_expr SEMICOLON 
            {
              Object RESULT =null;
		int axpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int axpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object axp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("ASSIGN VALUES");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) axp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("assignvalues",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // vars ::= id_or_letter LPAR vartypes RPAR ASSIGN assign_expr SEMICOLON 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int axpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int axpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object axp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("VARS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        mm.addLeafs((Node) axp);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("vars",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // id_or_letter ::= LETTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("id_or_letter",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // id_or_letter ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("id_or_letter",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // return ::= RETURN assign_num SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("return",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // return ::= RETURN id_or_letter SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("return",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_list ::= function_declaration 
            {
              Object RESULT =null;
		int fcdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fcdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fcd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION LIST");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fcd);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // function_list ::= function_list function_declaration 
            {
              Object RESULT =null;
		int fclleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fclright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fcl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fcdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fcdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fcd = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION LIST");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fcl);
        mm.addLeafs((Node) fcd);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_list",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // function_declaration ::= FUNC vartypes id_or_letter LPAR params RPAR LKEY error RKEY 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION DECLARATION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        mm.addLeafs((Node) p);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_declaration ::= FUNC vartypes id_or_letter LPAR params RPAR LKEY return RKEY 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION DECLARATION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        mm.addLeafs((Node) p);
        mm.addLeafs((Node) r);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_declaration ::= FUNC vartypes id_or_letter LPAR params RPAR LKEY statement_list return RKEY 
            {
              Object RESULT =null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("FUNCTION DECLARATION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vt);
        mm.addLeafs((Node) p);
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) r);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("function_declaration",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // call_params ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("call_params",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // call_params ::= call_params COMMA ID 
            {
              Object RESULT =null;
		int cparleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cparright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cpar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("CALL PARAMS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) cpar);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("call_params",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // call_function ::= error SEMICOLON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("call_function",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // call_function ::= id_or_letter LPAR call_params RPAR SEMICOLON 
            {
              Object RESULT =null;
		int cparleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cparright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object cpar = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("CALL FUNCTION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) cpar);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("call_function",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // for_stmt ::= FOR LPAR error RPAR 
            {
              Object RESULT =null;
		
        Node mm = new Node();
        mm.setTag("FOR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_stmt",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // for_stmt ::= FOR LPAR INT ID SEMICOLON assign_num STEP assign_num RPAR LKEY RKEY 
            {
              Object RESULT =null;
		
        Node mm = new Node();
        mm.setTag("FOR STATEMENT");
        mm.setID(parser.count);
        parser.count++;

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_stmt",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // for_stmt ::= FOR LPAR INT ID SEMICOLON assign_num STEP assign_num RPAR LKEY statement_list RKEY 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Node mm = new Node();
        mm.setTag("FOR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("for_stmt",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // while_stmt ::= RUN LKEY RKEY WHILE LPAR boolean_expr RPAR SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("WHILE STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("while_stmt",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while_stmt ::= RUN LKEY statement_list RKEY WHILE LPAR boolean_expr RPAR SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("WHILE STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("while_stmt",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // else_stmt ::= ELSE LKEY statement_list RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node mm = new Node();
        mm.setTag("ELSE STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_stmt",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // else_stmt ::= ELSE LKEY RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		
        Node mm = new Node();
        mm.setTag("ELSE STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("else_stmt",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY statement_list RKEY else_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) elst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY statement_list RKEY or_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) orst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY RKEY else_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object elst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) elst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY RKEY or_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) orst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY statement_list RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) orst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // or_stmt ::= OR LPAR boolean_expr RPAR LKEY RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        Node mm = new Node();
        mm.setTag("OR STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("or_stmt",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY statement_list RKEY else_stmt 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) be);
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) el);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY RKEY else_stmt 
            {
              Object RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int beright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object be = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) be);
        mm.addLeafs((Node) el);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY statement_list RKEY or_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) orst);
        mm.addLeafs((Node) stl);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY statement_list RKEY ENDIF error 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) stl);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY statement_list RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) stl);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY RKEY or_stmt 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        mm.addLeafs((Node) orst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_stmt ::= IF LPAR error NT$0 RPAR LKEY RKEY or_stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int orstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int orstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object orst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) orst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.report_error("expression","WRONG"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY RKEY ENDIF error 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if_stmt ::= IF LPAR boolean_expr RPAR LKEY RKEY ENDIF SEMICOLON 
            {
              Object RESULT =null;
		int bxpleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int bxpright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object bxp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
        Node mm = new Node();
        mm.setTag("IF STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) bxp);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("if_stmt",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= switch_stmt 
            {
              Object RESULT =null;
		int swstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int swstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object swst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT SWITCH");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) swst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= call_function 
            {
              Object RESULT =null;
		int cfstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cfstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cfst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT CALL FUNCTION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) cfst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= function_declaration 
            {
              Object RESULT =null;
		int fdstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fdstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fdst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT FUNCTION DECLARATION");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fdst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= print 
            {
              Object RESULT =null;
		int pstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT PRINT");
        mm.setID(parser.count);
        
        parser.count++;
        mm.addLeafs((Node) pst);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= assignvalues 
            {
              Object RESULT =null;
		int avstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int avstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object avst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT ASSIGN VALUES");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) avst);
        
        RESULT = mm;        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= assign 
            {
              Object RESULT =null;
		int astleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int astright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ast = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT ASSIGN");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) ast);
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= vars 
            {
              Object RESULT =null;
		int vstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object vst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT VARS");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) vst);

        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= while_stmt 
            {
              Object RESULT =null;
		int whstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int whstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object whst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT WHILE");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) whst);

        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= if_stmt 
            {
              Object RESULT =null;
		int ifstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ifstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object ifst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT IF");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) ifst);

        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= for_stmt 
            {
              Object RESULT =null;
		int fstleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fstright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fst = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fst);

        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement_list ::= statement 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT LIST");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) st);

        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("STATEMENT LIST");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) stl);
        mm.addLeafs((Node) st);
        
        RESULT=mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("statement_list",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // mmain ::= INT MAIN LPAR RPAR LKEY ENDMAIN RKEY 
            {
              Object RESULT =null;
		
        Node mm = new Node();
        mm.setTag("MAIN");
        mm.setID(parser.count);
        parser.count++;
        
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mmain",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mmain ::= INT MAIN LPAR RPAR LKEY statement_list ENDMAIN RKEY 
            {
              Object RESULT =null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object stl = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        Node mm = new Node();
        mm.setTag("MAIN");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node)stl);
        
        RESULT = mm;
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mmain",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= mmain function_list 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fl1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fl1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("Start");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) m1);
        mm.addLeafs((Node) fl1);
        parser.root=(Node) mm;
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= function_list mmain 
            {
              Object RESULT =null;
		int fl1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object fl1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("Start");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fl1);
        mm.addLeafs((Node) m1);
        parser.root=(Node) mm;
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= function_list mmain function_list 
            {
              Object RESULT =null;
		int fl1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int fl1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object fl1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fl2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fl2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object fl2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("Start");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) fl1);
        mm.addLeafs((Node) m1);
        mm.addLeafs((Node) fl2);
        parser.root=(Node) mm;
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= mmain 
            {
              Object RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        Node mm = new Node();
        mm.setTag("Start");
        mm.setID(parser.count);
        parser.count++;
        mm.addLeafs((Node) m1);
        parser.root=(Node) mm;
        RESULT = mm;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

